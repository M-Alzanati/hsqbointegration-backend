name: Deploy to prod
run-name: ${{ format('Deploy | {0} | {1}', github.ref_name, github.sha) }}

on:
  workflow_dispatch:
    inputs:
      AWS_REGION:
        description: "AWS Region (default: us-east-1)"
        required: false
        default: "us-east-1"
      CREATE_SECRETS:
        description: "Bootstrap SecretsManager secrets stack (true only for first-time)"
        required: false
        default: "false"
      STAGE_NAME:
        description: "API Gateway stage name (e.g., prod, dev)"
        required: false
        default: "prod"
      QBO_ENV:
        description: "QuickBooks environment (production|sandbox)"
        required: false
        default: "production"
      DOCDB_CLUSTER_IDENTIFIER:
        description: "Desired DocDB cluster identifier (used for existence check)"
        required: false
        default: "quickbooks-hubspot-cluster"
      FORCE_REFRESH:
        description: "Force cold restart of Lambda environments after deploy (true/false)"
        required: false
        default: "false"

permissions:
  contents: read
  actions: write

jobs:
  deploy:
    name: Deploy CloudFormation and Lambda
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ inputs.AWS_REGION }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install dependencies
        run: npm ci
        working-directory: src

      - name: Package Lambda
        run: npm run package-lambda
        working-directory: src

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy S3 bucket (bucket-only stack)
        run: >
          aws cloudformation deploy \
            --stack-name lambda-deployment-bucket \
            --template-file src/bucket-only.yaml \
            --capabilities CAPABILITY_NAMED_IAM

      - name: Deploy Secrets stack (optional bootstrap)
        if: ${{ inputs.CREATE_SECRETS == 'true' }}
        run: >
          aws cloudformation deploy \
            --stack-name hubspot-quickbooks-secrets \
            --template-file src/secrets-only.yaml \
            --capabilities CAPABILITY_NAMED_IAM

      - name: Set DocumentDB password secret value (optional)
        if: ${{ inputs.CREATE_SECRETS == 'true' }}
        env:
          DOCDB_PASSWORD: ${{ secrets.DOCDB_PASSWORD }}
        run: |
          if [ -n "$DOCDB_PASSWORD" ]; then
            aws secretsmanager put-secret-value \
              --secret-id docdb/password \
              --secret-string "{\"password\":\"$DOCDB_PASSWORD\"}"
          else
            echo "DOCDB_PASSWORD secret not set, skipping."
          fi

      - name: Get bucket name output
        id: get_bucket
        run: |
          BUCKET=$(aws cloudformation describe-stacks --stack-name lambda-deployment-bucket --query "Stacks[0].Outputs[?OutputKey=='LambdaDeploymentBucketName'].OutputValue" --output text)
          echo "bucket_name=$BUCKET" >> $GITHUB_OUTPUT

      - name: Compute unique S3 key for Lambda zip
        id: s3key
        run: |
          echo "key=hubspot-quickbooks-backend-${GITHUB_SHA}.zip" >> $GITHUB_OUTPUT

      - name: Upload Lambda zip to S3 (unique key)
        run: aws s3 cp src/hubspot-quickbooks-backend.zip s3://${{ steps.get_bucket.outputs.bucket_name }}/${{ steps.s3key.outputs.key }}

      - name: Detect existing DocDB cluster
        id: detect_docdb
        env:
          AWS_REGION: ${{ env.AWS_REGION }}
          CLUSTER_ID: ${{ inputs.DOCDB_CLUSTER_IDENTIFIER }}
        run: |
          set -euo pipefail
          DATA_STACK=hubspot-quickbooks-data
          STACK_EXISTS=false
          CURR_USE_EXISTING=""
          if aws cloudformation describe-stacks --stack-name "$DATA_STACK" >/dev/null 2>&1; then
            STACK_EXISTS=true
            # Read the current parameter value to keep behavior sticky and avoid flip-flopping
            CURR_USE_EXISTING=$(aws cloudformation describe-stacks --stack-name "$DATA_STACK" \
              --query "Stacks[0].Parameters[?ParameterKey=='UseExistingDocDBCluster'].ParameterValue" --output text | tr -d '\r') || true
          fi
          EXISTS=false
          if aws docdb describe-db-clusters --region "$AWS_REGION" --db-cluster-identifier "$CLUSTER_ID" >/tmp/docdb.json 2>/dev/null; then
            EXISTS=true
            ENDPOINT=$(jq -r '.DBClusters[0].Endpoint' /tmp/docdb.json)
            SG=$(jq -r '.DBClusters[0].VpcSecurityGroups[0].VpcSecurityGroupId' /tmp/docdb.json)
            MASTER=$(jq -r '.DBClusters[0].MasterUsername' /tmp/docdb.json)
            SUBNET_GRP=$(jq -r '.DBClusters[0].DBSubnetGroup' /tmp/docdb.json)
          fi
          echo "data_stack_exists=$STACK_EXISTS" >> $GITHUB_OUTPUT
          if [ -n "$CURR_USE_EXISTING" ] && [ "$CURR_USE_EXISTING" != "None" ]; then
            echo "current_use_existing=$CURR_USE_EXISTING" >> $GITHUB_OUTPUT
          fi
          echo "exists=$EXISTS" >> $GITHUB_OUTPUT
          echo "cluster_id=$CLUSTER_ID" >> $GITHUB_OUTPUT
          if [ "$EXISTS" = true ]; then
            echo "endpoint=$ENDPOINT" >> $GITHUB_OUTPUT
            echo "sg_id=$SG" >> $GITHUB_OUTPUT
            echo "master=$MASTER" >> $GITHUB_OUTPUT
            echo "subnet_group_name=$SUBNET_GRP" >> $GITHUB_OUTPUT
          fi

      - name: Deploy Network stack
        run: |
          set -euo pipefail
          STACK=hubspot-quickbooks-network
          aws cloudformation deploy \
            --stack-name "$STACK" \
            --template-file src/network.yaml \
            --capabilities CAPABILITY_NAMED_IAM \
            --no-fail-on-empty-changeset

      - name: Create DocDB (one-time, if not exists)
        if: ${{ steps.detect_docdb.outputs.exists != 'true' }}
        env:
          AWS_REGION: ${{ env.AWS_REGION }}
        run: |
          set -euo pipefail
          aws cloudformation deploy \
            --region "$AWS_REGION" \
            --stack-name hubspot-quickbooks-data-create \
            --template-file src/data-create.yaml \
            --capabilities CAPABILITY_NAMED_IAM \
            --no-fail-on-empty-changeset \
            --parameter-overrides \
              DocDBClusterIdentifier=${{ inputs.DOCDB_CLUSTER_IDENTIFIER }}

      - name: Get Data Stack Create outputs (if created)
        id: get_data_create
        if: ${{ steps.detect_docdb.outputs.exists != 'true' }}
        run: |
          set -euo pipefail
          STACK=hubspot-quickbooks-data-create
          CREATED_ENDPOINT=$(aws cloudformation describe-stacks --stack-name "$STACK" --query "Stacks[0].Outputs[?OutputKey=='DocDBClusterEndpoint'].OutputValue" --output text)
          CREATED_ID=$(aws cloudformation describe-stacks --stack-name "$STACK" --query "Stacks[0].Outputs[?OutputKey=='DocDBClusterIdentifierOut'].OutputValue" --output text)
          CREATED_SG=$(aws cloudformation describe-stacks --stack-name "$STACK" --query "Stacks[0].Outputs[?OutputKey=='DocDBSecurityGroupId'].OutputValue" --output text)
          echo "created_endpoint=$CREATED_ENDPOINT" >> $GITHUB_OUTPUT
          echo "created_cluster_id=$CREATED_ID" >> $GITHUB_OUTPUT
          echo "created_sg=$CREATED_SG" >> $GITHUB_OUTPUT

      - name: Attach to existing DocDB (ingress + outputs)
        env:
          AWS_REGION: ${{ env.AWS_REGION }}
          EXISTING_CLUSTER_ID: ${{ steps.detect_docdb.outputs.cluster_id }}
          EXISTING_ENDPOINT: ${{ steps.detect_docdb.outputs.endpoint }}
          EXISTING_SG: ${{ steps.detect_docdb.outputs.sg_id }}
          CREATED_CLUSTER_ID: ${{ steps.get_data_create.outputs.created_cluster_id }}
          CREATED_ENDPOINT: ${{ steps.get_data_create.outputs.created_endpoint }}
          CREATED_SG: ${{ steps.get_data_create.outputs.created_sg }}
        run: |
          set -euo pipefail
          # Prefer created values if we just created the cluster; else use detected ones
          CLUSTER_ID="${CREATED_CLUSTER_ID:-${EXISTING_CLUSTER_ID:-}}"
          ENDPOINT="${CREATED_ENDPOINT:-${EXISTING_ENDPOINT:-}}"
          SG_ID="${CREATED_SG:-${EXISTING_SG:-}}"

          # Guard against empty values
          for v in CLUSTER_ID ENDPOINT SG_ID; do
            VAL="${!v}"
            if [ -z "$VAL" ] || [ "$VAL" = "None" ] || [ "$VAL" = "null" ]; then
              echo "Error: $v is empty. Cannot attach ingress to DocDB."
              exit 1
            fi
          done

          aws cloudformation deploy \
            --region "$AWS_REGION" \
            --stack-name hubspot-quickbooks-data \
            --template-file src/data-attach.yaml \
            --capabilities CAPABILITY_NAMED_IAM \
            --no-fail-on-empty-changeset \
            --parameter-overrides \
              ExistingDocDBClusterIdentifier=$CLUSTER_ID \
              ExistingDocDBClusterEndpoint=$ENDPOINT \
              ExistingDocDBSecurityGroupId=$SG_ID

      - name: Get Data Stack outputs
        id: get_data
        run: |
          set -euo pipefail
          STACK=hubspot-quickbooks-data
          DOCDB_ENDPOINT=$(aws cloudformation describe-stacks --stack-name "$STACK" --query "Stacks[0].Outputs[?OutputKey=='DocDBClusterEndpoint'].OutputValue" --output text)
          DOCDB_ID=$(aws cloudformation describe-stacks --stack-name "$STACK" --query "Stacks[0].Outputs[?OutputKey=='DocDBClusterIdentifierOut'].OutputValue" --output text)
          echo "docdb_endpoint=$DOCDB_ENDPOINT" >> $GITHUB_OUTPUT
          echo "docdb_cluster_id=$DOCDB_ID" >> $GITHUB_OUTPUT

      - name: Deploy App stack (Lambda + API)
        env:
          AWS_REGION: ${{ env.AWS_REGION }}
          BUCKET: ${{ steps.get_bucket.outputs.bucket_name }}
          S3_KEY: ${{ steps.s3key.outputs.key }}
          DOCDB_ENDPOINT: ${{ steps.get_data.outputs.docdb_endpoint }}
          DOCDB_ID: ${{ steps.get_data.outputs.docdb_cluster_id }}
          MASTER_USER: ${{ steps.detect_docdb.outputs.master }}
          STAGE: ${{ inputs.STAGE_NAME }}
          QBO_ENV: ${{ inputs.QBO_ENV }}
        run: |
          set -euo pipefail
          DOCDB_MASTER_USERNAME=${MASTER_USER:-hubspot_quickbooks_user}
          aws cloudformation deploy \
            --region "$AWS_REGION" \
            --stack-name hubspot-quickbooks-app \
            --template-file src/app.yaml \
            --capabilities CAPABILITY_NAMED_IAM \
            --parameter-overrides \
              LambdaDeploymentBucket=$BUCKET \
              LambdaS3Key=$S3_KEY \
              DocDBClusterEndpoint=$DOCDB_ENDPOINT \
              DocDBClusterIdentifier=$DOCDB_ID \
              DocDBMasterUsername=$DOCDB_MASTER_USERNAME \
              StageName=$STAGE \
              QuickBooksEnvironment=$QBO_ENV

      - name: Force refresh Lambda environments (cold restart)
        if: ${{ inputs.FORCE_REFRESH == 'true' }}
        env:
          AWS_REGION: ${{ env.AWS_REGION }}
          STAGE: ${{ inputs.STAGE_NAME }}
        run: |
          set -euo pipefail
          API_FN="HubspotQuickbookApiLambda-${STAGE}"
          ADMIN_FN="HubspotQuickbookAdminInvalidate-${STAGE}"
          for FN in "$API_FN" "$ADMIN_FN"; do
            echo "Forcing cold start by updating Description on $FN"
            aws lambda update-function-configuration --function-name "$FN" --description "refresh-${GITHUB_RUN_NUMBER}"
          done
