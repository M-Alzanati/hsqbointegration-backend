AWSTemplateFormatVersion: "2010-09-09"
Description: Data stack (DocumentDB) for HubSpot-QuickBooks backend

Parameters:
  VpcId:
    Type: String
    Description: VPC ID where DocumentDB will be deployed
  PrivateSubnet1Id:
    Type: String
  PrivateSubnet2Id:
    Type: String
  LambdaSecurityGroupId:
    Type: String
  UseExistingDocDBCluster:
    Type: String
    Default: "false"
    AllowedValues: ["true", "false"]
    Description: Set to "true" to reuse an existing DocumentDB cluster instead of creating a new one
  DocDBMasterUsername:
    Type: String
    Default: hubspot_quickbooks_user
  DocDBInstanceClass:
    Type: String
    Default: db.t3.medium
  DocDBClusterIdentifier:
    Type: String
    Default: quickbooks-hubspot-cluster
  ExistingDocDBClusterIdentifier:
    Type: String
    Default: ""
    Description: Identifier of an existing DocumentDB cluster (required when UseExistingDocDBCluster=true)
  ExistingDocDBClusterEndpoint:
    Type: String
    Default: ""
    Description: Endpoint of an existing DocumentDB cluster (required when UseExistingDocDBCluster=true)
  ExistingDocDBSecurityGroupId:
    Type: String
    Default: ""
    Description: Security Group ID attached to the existing DocumentDB cluster (to allow Lambda ingress when UseExistingDocDBCluster=true)

Resources:
  DocDBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: CreateNewDocDB
    Properties:
      GroupDescription: Allow DocumentDB access from Lambda
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 27017
          ToPort: 27017
          SourceSecurityGroupId: !Ref LambdaSecurityGroupId

  DocDBSubnetGroup:
    Type: AWS::DocDB::DBSubnetGroup
    Condition: CreateNewDocDB
    Properties:
      DBSubnetGroupDescription: Subnets for DocumentDB
      SubnetIds:
        - !Ref PrivateSubnet1Id
        - !Ref PrivateSubnet2Id

  DocDBCluster:
    Type: AWS::DocDB::DBCluster
    Condition: CreateNewDocDB
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      MasterUsername: !Ref DocDBMasterUsername
      MasterUserPassword: !Sub "{{resolve:secretsmanager:docdb/password:SecretString:password}}"
      DBClusterIdentifier: !Ref DocDBClusterIdentifier
      BackupRetentionPeriod: 7
      PreferredBackupWindow: 07:00-09:00
      VpcSecurityGroupIds:
        - !Ref DocDBSecurityGroup
      DBSubnetGroupName: !Ref DocDBSubnetGroup
      EngineVersion: 5.0
      EnableCloudwatchLogsExports:
        - audit
        - profiler

  DocDBInstance:
    Type: AWS::DocDB::DBInstance
    Condition: CreateNewDocDB
    Properties:
      DBClusterIdentifier: !Ref DocDBCluster
      DBInstanceClass: !Ref DocDBInstanceClass

  AllowLambdaToExistingDocDBIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: UseExistingDocDB
    Properties:
      GroupId: !Ref ExistingDocDBSecurityGroupId
      IpProtocol: tcp
      FromPort: 27017
      ToPort: 27017
      SourceSecurityGroupId: !Ref LambdaSecurityGroupId

Outputs:
  DocDBClusterEndpoint:
    Value: !If [UseExistingDocDB, !Ref ExistingDocDBClusterEndpoint, !GetAtt DocDBCluster.Endpoint]
  DocDBClusterIdentifierOut:
    Value: !If [UseExistingDocDB, !Ref ExistingDocDBClusterIdentifier, !Ref DocDBClusterIdentifier]

Conditions:
  UseExistingDocDB: !Equals [!Ref UseExistingDocDBCluster, "true"]
  CreateNewDocDB: !Equals [!Ref UseExistingDocDBCluster, "false"]
