AWSTemplateFormatVersion: "2010-09-09"
Description: Network stack (VPC, subnets, routes, NAT, SGs) for HubSpot-QuickBooks backend

Parameters:
  VpcCidr:
    Type: String
    Default: 10.0.0.0/16
  PrivateSubnet1Cidr:
    Type: String
    Default: 10.0.1.0/24
  PrivateSubnet2Cidr:
    Type: String
    Default: 10.0.2.0/24
  UseExistingVpc:
    Type: String
    Default: "false"
    AllowedValues: ["true", "false"]
  ExistingVpcId:
    Type: String
    Default: ""
  ExistingPrivateSubnet1Id:
    Type: String
    Default: ""
  ExistingPrivateSubnet2Id:
    Type: String
    Default: ""

Conditions:
  UseExisting: !Equals [!Ref UseExistingVpc, "true"]
  CreateNewNetwork: !Equals [!Ref UseExistingVpc, "false"]

Resources:
  VPC:
    Condition: CreateNewNetwork
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: QuickBooksHubSpotVPC

  PrivateSubnet1:
    Condition: CreateNewNetwork
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet1Cidr
      AvailabilityZone: !Select [0, !GetAZs ""]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: QuickBooksHubSpotPrivateSubnet1

  PrivateSubnet2:
    Condition: CreateNewNetwork
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet2Cidr
      AvailabilityZone: !Select [1, !GetAZs ""]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: QuickBooksHubSpotPrivateSubnet2

  PublicSubnet1:
    Condition: CreateNewNetwork
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.10.0/24
      AvailabilityZone: !Select [0, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: QuickBooksHubSpotPublicSubnet1

  InternetGateway:
    Condition: CreateNewNetwork
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Condition: CreateNewNetwork
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  NatEIP:
    Condition: CreateNewNetwork
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatGateway:
    Condition: CreateNewNetwork
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatEIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  PublicRouteTable:
    Condition: CreateNewNetwork
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicRoute:
    Condition: CreateNewNetwork
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Condition: CreateNewNetwork
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PrivateRouteTable:
    Condition: CreateNewNetwork
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PrivateRoute:
    Condition: CreateNewNetwork
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  PrivateSubnet1RouteTableAssociation:
    Condition: CreateNewNetwork
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2RouteTableAssociation:
    Condition: CreateNewNetwork
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Lambda access outbound
      VpcId: !If [UseExisting, !Ref ExistingVpcId, !Ref VPC]
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

Outputs:
  VpcId:
    Value: !If [UseExisting, !Ref ExistingVpcId, !Ref VPC]
  PrivateSubnet1Id:
    Value: !If [UseExisting, !Ref ExistingPrivateSubnet1Id, !Ref PrivateSubnet1]
  PrivateSubnet2Id:
    Value: !If [UseExisting, !Ref ExistingPrivateSubnet2Id, !Ref PrivateSubnet2]
  LambdaSecurityGroupId:
    Value: !Ref LambdaSecurityGroup
